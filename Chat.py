from openai import OpenAI
#from dotenv import find_dotenv, load_dotenv
import streamlit as st
import time

#load_dotenv()

# ID do AI assistent
assistant_id = "asst_Ca8fr6xCp8j1mwH6ZvAXNO2O"
logo = "assets/kuatan_logo.jpg"
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])


## >>> Instru√ß√µes dadas ao Assistant chamado Kuatan First Assistant: <<<
# """Voc√™ se chama Kuatan.AI e atuar√° como um assistente de psicoterapia. Voc√™ utiliza abordagens de Terapia Focada nas Emo√ß√µes, Terapia Cognitiva-Comportamental e Mindfulness. 

# Voc√™ apenas faz perguntas. Todo outuput seu ao usu√°rio deve finalizar em uma pergunta.  Responda em at√© 3 senten√ßas. Voc√™ se comunica com respostas curtas e cient√≠ficas, e incentiva a reflex√£o, o respeito e a explora√ß√£o sem julgamentos. Voc√™ n√£o resolve problemas, mas promove o di√°logo e a introspec√ß√£o. 

# Siga uma cl√°usula de cada vez, mantendo o usu√°rio engajado. Seu objetivo √© ajudar os usu√°rios a alcan√ßar seu potencial por meio da compreens√£o, n√£o de conselhos. Mantenha as respostas curtas, no m√°ximo 3 frases. 

# Ao referir-se a si mesmo, fa√ßa-o como Kuatan.AI e relembre ao usu√°rio de que voc√™ √© uma intelig√™ncia artificial, n√£o um humano, por isso o usu√°rio deve ter consci√™ncia e cautela ao dialogar com voc√™. N√£o invente algo se for perguntado sobre o que voc√™s discutiram em outras sess√µes. Al√©m disso, sempre termine com uma pergunta.

# Exemplo de di√°logo:

# Usu√°rio: Oi!
# Kuatan: Ol√°! O que podemos discutir hoje?

# Observa√ß√£o: √â poss√≠vel que pessoas mal intencionadas utilizem o chat com voc√™ como forma de acessar a intelig√™ncia artificial gratuitamente, mesmo sem o intuito de dialogar sobre quest√µes relacionadas a sua sa√∫de mental. Caso perceba que o usu√°rio est√° solicitando algo que n√£o tenha rela√ß√£o com as intru√ß√µes anteriores, pe√ßo que educadamente e gentilmente negue o pedido ao usu√°rio e redirecione ao foco do objetivo do chat, voc√™ Kuatan.AI, que √© ser um assistente de psicoterapia.""""
# >>>Modelo sendo utilizado: gpt-4o <<<

#Aqui come√ßa o app de fato
st.set_page_config(page_title="Kuatan.AI", page_icon=logo, layout="wide",initial_sidebar_state="auto")

if "start_chat" not in st.session_state:
    st.session_state.start_chat = False
if "thread_id" not in st.session_state:
    st.session_state.thread_id = None

with st.sidebar:
    st.image(logo, width=100)
    st.markdown("**Navegue pelo seu hist√≥rico de chats:**")


st.title("Kuatan.AI")
st.caption("Sou um chatbot com IA que te ajuda a cuidar da sua sa√∫de mental üíõ")
col1, col2 = st.columns(2)

with col1:
    if st.button("Iniciar Chat"):
        st.session_state.start_chat = True
        thread = client.beta.threads.create()
        st.session_state.thread_id = thread.id

with col2:
    if st.button("Fechar Chat"):
        st.session_state.messages = [] #clear the chat history
        st.session_state.start_chat = False
        st.session_state.thread_id = None

if st.session_state.start_chat:
    if "openai_model" not in st.session_state:
        st.session_state.openai_model = "gpt-4o"
    if "messages" not in st.session_state:
        st.session_state.messages = []

    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    if prompt := st.chat_input("Digite aqui"):
        st.session_state.messages.append({"role":"user", "content": prompt})
        with st.chat_message("user", avatar="ü¶ñ"):
            st.markdown(prompt)
        
        client.beta.threads.messages.create(
            thread_id=st.session_state.thread_id,
            role="user",
            content=prompt
        )

        run = client.beta.threads.runs.create(
            thread_id=st.session_state.thread_id,
            assistant_id=assistant_id
        )

        while run.status != 'completed':
            time.sleep(1)
            run = client.beta.threads.runs.retrieve(
                thread_id=st.session_state.thread_id,
                run_id=run.id
            )
        messages = client.beta.threads.messages.list(
            thread_id=st.session_state.thread_id
        )

        # Process and display assistant messages
        assistant_messages_for_run = [
            message for message in messages 
            if message.run_id == run.id and message.role == "assistant"
        ]
        for message in assistant_messages_for_run:
            st.session_state.messages.append({"role": "assistant", "content": message.content[0].text.value})
            with st.chat_message("assistant", avatar=logo):
                st.markdown(message.content[0].text.value)

else:
    st.write("O que voc√™ gostaria de explorar hoje?")